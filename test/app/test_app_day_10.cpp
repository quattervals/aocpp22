#include <cstdint>
#include <catch2/catch_test_macros.hpp>

#include <vector>
#include <iostream>
#include <list>
#include <string>
#include <deque>

#include "day_10.hpp"
#include "utils.hpp"

TEST_CASE("Day 10 Tests") {
  std::vector<char> expected_1d = {
    '#', '#', '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '#', '#',
    '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '#', '#', '.', '.', '#', '#', '#', '.',
    '.', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#', '#',
    '#', '.', '.', '.', '#', '#', '#', '.', '.', '.', '#', '#', '#', '.', '#', '#', '#', '#', '.', '.', '.', '.',
    '#', '#', '#', '#', '.', '.', '.', '.', '#', '#', '#', '#', '.', '.', '.', '.', '#', '#', '#', '#', '.', '.',
    '.', '.', '#', '#', '#', '#', '.', '.', '.', '.', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '#', '#',
    '#', '#', '#', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '#', '#', '#', '#',
    '#', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#',
    '#', '#', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '#', '#',
    '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#',
    '#', '.', '.', '.', '.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '.', '.', '.', '.', '.'
  };
  SECTION("addx") {
    std::vector<int> reg;

    auto ret = addx(reg, 4, 1);

    REQUIRE(reg[0] == 1);
    REQUIRE(reg[1] == 1);
    REQUIRE(ret == 5);
  }
  SECTION("noop") {
    std::vector<int> reg;

    noop(reg, 1);

    REQUIRE(reg[0] == 1);
  }

  SECTION("true if index matches sprite given by val") {
    REQUIRE(false == drawSolid(0, 13));
    REQUIRE(true == drawSolid(0, 1));
    REQUIRE(true == drawSolid(0, 0));
    REQUIRE(true == drawSolid(20, 19));
    REQUIRE(true == drawSolid(21, 20));
    REQUIRE(true == drawSolid(40, 1));
    REQUIRE(true == drawSolid(9, 8));
  }

  SECTION("paint example 1 D") {
    std::vector<int> reg = { 1,  1,  16, 16, 5,  5,  11, 11, 8,  8,  13, 13, 12, 12, 4,  4,  17, 17, 21, 21, 21, 20,
                             20, 25, 25, 24, 24, 29, 29, 28, 28, 33, 33, 32, 32, 37, 37, 36, 36, 1,  1,  2,  2,  26,
                             26, 7,  7,  8,  8,  24, 24, 13, 13, 13, 13, 34, 34, 19, 19, 19, 19, 16, 16, 25, 25, 26,
                             26, 23, 23, 31, 31, 32, 32, 37, 37, 37, 37, 37, 37, 37, 1,  1,  1,  2,  2,  9,  9,  9,
                             9,  9,  11, 11, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 25, 25, 26, 26, 26, 13, 13,
                             26, 26, 33, 33, 33, 34, 34, 1,  1,  1,  1,  1,  3,  3,  3,  3,  3,  11, 11, 11, 10, 10,
                             12, 12, 13, 13, 13, 30, 30, 21, 21, 22, 22, 23, 23, 20, 20, 31, 31, 31, 31, 32, 32, 32,
                             33, 33, 33, 33, 20, 20, 1,  1,  2,  2,  5,  5,  31, 31, 1,  1,  13, 13, 12, 12, 15, 15,
                             16, 16, 16, 16, 16, 7,  7,  25, 25, 26, 26, 28, 28, 28, 28, 37, 37, 37, 37, 37, 36, 36,
                             38, 38, 1,  1,  2,  2,  5,  5,  5,  20, 20, -1, -1, 21, 21, 15, 15, 16, 16, 16, 18, 18,
                             19, 19, 19, 9,  9,  9,  9,  29, 29, 30, 30, 32, 32, 34, 34, 28, 28, 17, 17, 17 };

    std::vector<char> crt(reg.size(), '.');

    for (std::size_t i{ 0 }; i < reg.size(); ++i) {
      if (drawSolid(i, reg[i])) {
        crt[i] = '#';
      }
    }

    REQUIRE(expected_1d == crt);
  }

  SECTION("Print screen") {
    print_screen(expected_1d);
  }

  SECTION("Extract Sub-Vector (a copy)") {
    auto subvec = copy_slice(expected_1d, 0, 39);

    subvec[4] = 'X';

    REQUIRE(expected_1d[4] != subvec[4]);
  }
}
